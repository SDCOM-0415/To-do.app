name: Build and Release

# 只允许手动触发工作流
on:
  workflow_dispatch:  # 仅保留手动触发选项

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
            executable_ext: .exe
          # - os: macos-latest
          #   platform: macos
          #   arch: universal2
          #   executable_ext: ""
          - os: ubuntu-22.04
            platform: linux
            arch: x64
            executable_ext: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Read version
      id: version
      run: |
        VERSION=$(head -n 1 version)
        TAG_TYPE=$(tail -n 1 version)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # 根据标签类型设置tag_name
        if [ "$TAG_TYPE" == "Pre-release" ]; then
          # 获取当前日期
          DATE=$(date +%Y%m%d)
          
          # 检查是否已经有今天的构建，并获取最新的构建次数
          BUILD_COUNT=1
          # 获取所有以当前版本和日期开头的标签
          EXISTING_TAGS=$(git ls-remote --tags origin | grep "${VERSION}-${DATE}-" | sed -E "s/.*${VERSION}-${DATE}-([0-9]+).*/\1/" | sort -n)
          
          # 如果存在标签，获取最大值并加1
          if [ ! -z "$EXISTING_TAGS" ]; then
            LATEST_COUNT=$(echo "$EXISTING_TAGS" | tail -n 1)
            if [ ! -z "$LATEST_COUNT" ]; then
              BUILD_COUNT=$((LATEST_COUNT + 1))
            fi
          fi
          
          # 设置预览版标签
          TAG_NAME="${VERSION}-${DATE}-${BUILD_COUNT}"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "artifact_name_windows=Todo-App-$VERSION-preview-Windows-x64" >> $GITHUB_OUTPUT
          echo "artifact_name_macos=Todo-App-$VERSION-preview-macOS-x64" >> $GITHUB_OUTPUT
          echo "artifact_name_linux=Todo-App-$VERSION-preview-Linux-x64" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          # 正式版标签
          TAG_NAME="${VERSION}"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "artifact_name_windows=Todo-App-$VERSION-Windows-x64" >> $GITHUB_OUTPUT
          echo "artifact_name_macos=Todo-App-$VERSION-macOS-x64" >> $GITHUB_OUTPUT
          echo "artifact_name_linux=Todo-App-$VERSION-Linux-x64" >> $GITHUB_OUTPUT
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install system dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk python3-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    # - name: Install DMG creation tools (macOS)
    #   if: matrix.platform == 'macos'
    #   run: |
    #     brew install create-dmg

    - name: Build executable (Windows)
      if: matrix.platform == 'windows'
      run: |
        # Set console encoding to UTF-8 to handle Chinese characters
        $OutputEncoding = [console]::InputEncoding = [console]::OutputEncoding = New-Object System.Text.UTF8Encoding
        
        # Ensure tkinter is properly installed (using English output)
        python -c "import tkinter; print(f'Tkinter installed, version: {tkinter.TkVersion}')"
        
        # Get Tcl/Tk paths and set environment variables
        $tclPath = python -c "import tkinter, os; print(os.path.join(os.path.dirname(os.path.dirname(tkinter.__file__)), 'tcl'))"
        $tkPath = python -c "import tkinter, os; print(os.path.join(os.path.dirname(os.path.dirname(tkinter.__file__)), 'tk'))"
        
        # Set environment variables
        $env:TCL_LIBRARY = "$tclPath\tcl8.6"
        $env:TK_LIBRARY = "$tkPath\tk8.6"
        
        # Output environment variables for debugging
        Write-Host "TCL_LIBRARY: $env:TCL_LIBRARY"
        Write-Host "TK_LIBRARY: $env:TK_LIBRARY"
        
        # Output Python and dependency version info (using English)
        python -c "import sys; print(f'Python version: {sys.version}')"
        python -c "import customtkinter; print(f'CustomTkinter version: {customtkinter.__version__}')"
        python -c "import tkinter; print(f'Tkinter version: {tkinter.TkVersion}')"
        python -c "import PIL; print(f'PIL version: {PIL.__version__}')"
        
        # Build using the local build.spec file (without --collect-all options)
        pyinstaller build.spec --log-level DEBUG
        
        # Ensure all necessary tkinter files are included
        $distPath = "dist/TodoApp.exe"
        if (Test-Path $distPath) {
            Write-Host "Build successful: $distPath"
            
            # Copy Tcl/Tk library files to dist directory with path checking
            $distTclDir = "dist/tcl"
            $distTkDir = "dist/tk"
            if (-not (Test-Path $distTclDir)) { New-Item -ItemType Directory -Path $distTclDir -Force }
            if (-not (Test-Path $distTkDir)) { New-Item -ItemType Directory -Path $distTkDir -Force }
            
            # Check and copy Tcl files
            $tclSourcePath = "$tclPath\tcl8.6"
            if (Test-Path $tclSourcePath) {
                Copy-Item -Path "$tclSourcePath\*" -Destination "$distTclDir" -Recurse -Force
                Write-Host "Tcl 8.6 library files copied from $tclSourcePath"
            } elseif (Test-Path $tclPath) {
                Copy-Item -Path "$tclPath\*" -Destination "$distTclDir" -Recurse -Force
                Write-Host "Tcl library files copied from $tclPath"
            } else {
                Write-Host "Warning: Tcl library path not found: $tclPath"
            }
            
            # Check and copy Tk files
            $tkSourcePath = "$tkPath\tk8.6"
            if (Test-Path $tkSourcePath) {
                Copy-Item -Path "$tkSourcePath\*" -Destination "$distTkDir" -Recurse -Force
                Write-Host "Tk 8.6 library files copied from $tkSourcePath"
            } elseif (Test-Path $tkPath) {
                Copy-Item -Path "$tkPath\*" -Destination "$distTkDir" -Recurse -Force
                Write-Host "Tk library files copied from $tkPath"
            } else {
                Write-Host "Warning: Tk library path not found: $tkPath"
            }
            
            Write-Host "Tcl/Tk library files processing completed"
        } else {
            Write-Host "Build failed, executable not found at $distPath"
            Write-Host "Checking what files were actually created:"
            if (Test-Path "dist") {
                Get-ChildItem -Path "dist" -Recurse | ForEach-Object { Write-Host $_.FullName }
            } else {
                Write-Host "dist directory does not exist"
            }
        }
      shell: pwsh

    # - name: Build executable (macOS)
    #   if: matrix.platform == 'macos'
    #   run: |
    #     # 设置环境变量以构建通用二进制（同时支持 Intel 和 Apple Silicon）
    #     export ARCHFLAGS="-arch x86_64 -arch arm64"
    #     
    #     # 输出Python和依赖库版本信息
    #     python -c "import sys; print(f'Python版本: {sys.version}')"
    #     python -c "import platform; print(f'平台: {platform.platform()}')"
    #     python -c "import customtkinter; print(f'CustomTkinter版本: {customtkinter.__version__}')"
    #     python -c "import tkinter; print(f'Tkinter版本: {tkinter.TkVersion}')"
    #     
    #     # 使用 --target-architecture universal2 构建通用二进制
    #     pyinstaller --onefile --windowed --name "TodoApp" --target-architecture universal2 \
    #       --collect-all tkinter --collect-all customtkinter \
    #       --hidden-import=tkinter --hidden-import=tkinter.ttk \
    #       --hidden-import=tkinter.messagebox --hidden-import=tkinter.filedialog \
    #       app.py
    #   shell: bash
      
    - name: Build executable (Linux)
      if: matrix.platform == 'linux'
      run: |
        pyinstaller --onefile --windowed --name "TodoApp" --collect-all tkinter --collect-all customtkinter --hidden-import=tkinter --hidden-import=tkinter.ttk --hidden-import=tkinter.messagebox --hidden-import=tkinter.filedialog app.py
      shell: bash

    - name: Rename executable (Windows)
      if: matrix.platform == 'windows'
      run: |
        mv dist/TodoApp.exe "dist/${{ steps.version.outputs.artifact_name_windows }}.exe"
      shell: bash

    - name: Rename executable (Linux)
      if: matrix.platform == 'linux'
      run: |
        mv dist/TodoApp "dist/${{ steps.version.outputs.artifact_name_linux }}"

    # - name: Create macOS App Bundle and DMG
    #   if: matrix.platform == 'macos'
    #   run: |
    #     mkdir -p "dist/Todo App.app/Contents/MacOS"
    #     mkdir -p "dist/Todo App.app/Contents/Resources"
    #     
    #     mv dist/TodoApp "dist/Todo App.app/Contents/MacOS/TodoApp"
    #     chmod +x "dist/Todo App.app/Contents/MacOS/TodoApp"
    #     
    #     # 检查是否为通用二进制
    #     lipo -info "dist/Todo App.app/Contents/MacOS/TodoApp" || true
    #     
    #     # 获取当前版本号
    #     VERSION="${{ steps.version.outputs.version }}"
    #     
    #     cat > "dist/Todo App.app/Contents/Info.plist" << EOF
    #     <?xml version="1.0" encoding="UTF-8"?>
    #     <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    #     <plist version="1.0">
    #     <dict>
    #         <key>CFBundleExecutable</key>
    #         <string>TodoApp</string>
    #         <key>CFBundleIdentifier</key>
    #         <string>com.sdcom.todoapp</string>
    #         <key>CFBundleName</key>
    #         <string>Todo App</string>
    #         <key>CFBundleDisplayName</key>
    #         <string>Todo App \${VERSION}</string>
    #         <key>CFBundleVersion</key>
    #         <string>\${VERSION}</string>
    #         <key>CFBundleShortVersionString</key>
    #         <string>\${VERSION}</string>
    #         <key>CFBundlePackageType</key>
    #         <string>APPL</string>
    #         <key>NSHighResolutionCapable</key>
    #         <true/>
    #         <key>LSMinimumSystemVersion</key>
    #         <string>10.14.0</string>
    #         <key>LSArchitecturePriority</key>
    #         <array>
    #             <string>arm64</string>
    #             <string>x86_64</string>
    #         </array>
    #     </dict>
    #     </plist>
    #     EOF
    #     
    #     create-dmg \
    #       --volname "Todo App \${VERSION}" \
    #       --window-pos 200 120 \
    #       --window-size 600 300 \
    #       --icon-size 100 \
    #       --icon "Todo App.app" 175 120 \
    #       --hide-extension "Todo App.app" \
    #       --app-drop-link 425 120 \
    #       "dist/\${{ steps.version.outputs.artifact_name_macos }}.dmg" \
    #       "dist/Todo App.app" || true
    #     
    #     if [ ! -f "dist/\${{ steps.version.outputs.artifact_name_macos }}.dmg" ]; then
    #       hdiutil create -volname "Todo App \${VERSION}" -srcfolder "dist/Todo App.app" -ov -format UDZO "dist/\${{ steps.version.outputs.artifact_name_macos }}.dmg"
    #     fi

    - name: Create archive (Windows)
      if: matrix.platform == 'windows'
      run: |
        cd dist
        7z a "${{ steps.version.outputs.artifact_name_windows }}.zip" "${{ steps.version.outputs.artifact_name_windows }}.exe"
      shell: bash

    - name: Create archive (Linux)
      if: matrix.platform == 'linux'
      run: |
        cd dist
        tar -czf "${{ steps.version.outputs.artifact_name_linux }}.tar.gz" "${{ steps.version.outputs.artifact_name_linux }}"

    - name: Upload artifact (Windows)
      if: matrix.platform == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.version.outputs.artifact_name_windows }}
        path: dist/${{ steps.version.outputs.artifact_name_windows }}.zip

    # - name: Upload artifact (macOS)
    #   if: matrix.platform == 'macos'
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ${{ steps.version.outputs.artifact_name_macos }}
    #     path: dist/${{ steps.version.outputs.artifact_name_macos }}.dmg

    - name: Upload artifact (Linux)
      if: matrix.platform == 'linux'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.version.outputs.artifact_name_linux }}
        path: dist/${{ steps.version.outputs.artifact_name_linux }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Read version
      id: version
      run: |
        VERSION=$(head -n 1 version)
        TAG_TYPE=$(tail -n 1 version)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # 根据标签类型设置tag_name
        if [ "$TAG_TYPE" == "Pre-release" ]; then
          # 获取当前日期
          DATE=$(date +%Y%m%d)
          
          # 检查是否已经有今天的构建，并获取最新的构建次数
          BUILD_COUNT=1
          # 获取所有以当前版本和日期开头的标签
          EXISTING_TAGS=$(git ls-remote --tags origin | grep "${VERSION}-${DATE}-" | sed -E "s/.*${VERSION}-${DATE}-([0-9]+).*/\1/" | sort -n)
          
          # 如果存在标签，获取最大值并加1
          if [ ! -z "$EXISTING_TAGS" ]; then
            LATEST_COUNT=$(echo "$EXISTING_TAGS" | tail -n 1)
            if [ ! -z "$LATEST_COUNT" ]; then
              BUILD_COUNT=$((LATEST_COUNT + 1))
            fi
          fi
          
          # 设置预览版标签
          TAG_NAME="${VERSION}-${DATE}-${BUILD_COUNT}"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "artifact_name_windows=Todo-App-$VERSION-preview-Windows-x64" >> $GITHUB_OUTPUT
          echo "artifact_name_linux=Todo-App-$VERSION-preview-Linux-x64" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          # 正式版标签
          TAG_NAME="${VERSION}"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "artifact_name_windows=Todo-App-$VERSION-Windows-x64" >> $GITHUB_OUTPUT
          echo "artifact_name_linux=Todo-App-$VERSION-Linux-x64" >> $GITHUB_OUTPUT
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        release_name: ${{ steps.version.outputs.tag_name }}
        body: |
          ## Todo App ${{ steps.version.outputs.version }} ${{ steps.version.outputs.is_prerelease == 'true' && '- 预览版' || '' }}

          ### 🎉 新功能
          - 🔧 优化系统检测显示，macOS 显示真实版本号
          - 🔧 添加 Linux 发行版本显示支持
          - 🆕 完全重构，使用 customtkinter 框架
          - 🛠️ 修复 Windows 上 Tcl/Tk 依赖问题，确保单个exe文件可以独立运行

          ### 📦 下载说明
          - **Windows 用户**: 下载 `${{ steps.version.outputs.artifact_name_windows }}.zip`
          - **Linux 用户**: 下载 `${{ steps.version.outputs.artifact_name_linux }}.tar.gz`

          ### 🚀 使用方法
          - **Windows**: 解压 ZIP 文件，双击运行 .exe 文件
          - **Linux**: 解压 tar.gz 文件，运行可执行文件

          ### 📋 系统要求
          - **Windows**: Windows 10 或更高版本
          - **macOS**: macOS 10.14 或更高版本
          - **Linux**: 支持 GTK 的现代 Linux 发行版

          ### 🐛 问题反馈
          如果遇到问题，请在 [Issues](https://github.com/SDCOM-0415/To-do.app/issues) 页面反馈。

          ---
          **完整源代码**: [GitHub Repository](https://github.com/SDCOM-0415/To-do.app)
        draft: false
        prerelease: ${{ steps.version.outputs.is_prerelease == 'true' }}

    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ steps.version.outputs.artifact_name_windows }}/${{ steps.version.outputs.artifact_name_windows }}.zip
        asset_name: ${{ steps.version.outputs.artifact_name_windows }}.zip
        asset_content_type: application/zip

    # - name: Upload macOS Release Asset
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./${{ steps.version.outputs.artifact_name_macos }}/${{ steps.version.outputs.artifact_name_macos }}.dmg
    #     asset_name: ${{ steps.version.outputs.artifact_name_macos }}.dmg
    #     asset_content_type: application/x-apple-diskimage

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ steps.version.outputs.artifact_name_linux }}/${{ steps.version.outputs.artifact_name_linux }}.tar.gz
        asset_name: ${{ steps.version.outputs.artifact_name_linux }}.tar.gz
        asset_content_type: application/gzip
