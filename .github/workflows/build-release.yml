name: Build and Release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
            executable_ext: .exe
          # - os: macos-13-large
          #   platform: macos
          #   arch: x64
          #   executable_ext: ""
          - os: ubuntu-latest
            platform: linux
            arch: x64
            executable_ext: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Read version
      id: version
      run: |
        VERSION=$(cat version)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "artifact_name_windows=Todo-App-$VERSION-preview-Windows-x64" >> $GITHUB_OUTPUT
        echo "artifact_name_macos=Todo-App-$VERSION-preview-macOS-x64" >> $GITHUB_OUTPUT
        echo "artifact_name_linux=Todo-App-$VERSION-preview-Linux-x64" >> $GITHUB_OUTPUT
      shell: bash

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install system dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk python3-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    # - name: Install DMG creation tools (macOS)
    #   if: matrix.platform == 'macos'
    #   run: |
    #     brew install create-dmg

    - name: Build executable (Windows)
      if: matrix.platform == 'windows'
      run: |
        pyinstaller --onefile --windowed --name "TodoApp" --icon=res/icon.ico --collect-all tkinter --collect-all customtkinter --hidden-import=tkinter --hidden-import=tkinter.ttk --hidden-import=tkinter.messagebox --hidden-import=tkinter.filedialog --add-data "$(python -c "import tkinter; print(tkinter.__path__[0])")/*;tkinter/" app.py
      shell: bash

    - name: Build executable (macOS/Linux)
      if: matrix.platform != 'windows'
      run: |
        pyinstaller --onefile --windowed --name "TodoApp" --collect-all tkinter --collect-all customtkinter --hidden-import=tkinter --hidden-import=tkinter.ttk --hidden-import=tkinter.messagebox --hidden-import=tkinter.filedialog app.py
      shell: bash

    - name: Rename executable (Windows)
      if: matrix.platform == 'windows'
      run: |
        mv dist/TodoApp.exe "dist/${{ steps.version.outputs.artifact_name_windows }}.exe"
      shell: bash

    - name: Rename executable (Linux)
      if: matrix.platform == 'linux'
      run: |
        mv dist/TodoApp "dist/${{ steps.version.outputs.artifact_name_linux }}"

    # - name: Create macOS App Bundle and DMG
    #   if: matrix.platform == 'macos'
    #   run: |
    #     mkdir -p "dist/Todo App.app/Contents/MacOS"
    #     mkdir -p "dist/Todo App.app/Contents/Resources"
    #     
    #     mv dist/TodoApp "dist/Todo App.app/Contents/MacOS/TodoApp"
    #     chmod +x "dist/Todo App.app/Contents/MacOS/TodoApp"
    #     
    #     cat > "dist/Todo App.app/Contents/Info.plist" << EOF
    #     <?xml version="1.0" encoding="UTF-8"?>
    #     <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    #     <plist version="1.0">
    #     <dict>
    #         <key>CFBundleExecutable</key>
    #         <string>TodoApp</string>
    #         <key>CFBundleIdentifier</key>
    #         <string>com.sdcom.todoapp</string>
    #         <key>CFBundleName</key>
    #         <string>Todo App</string>
    #         <key>CFBundleDisplayName</key>
    #         <string>Todo App v0.3.1</string>
    #         <key>CFBundleVersion</key>
    #         <string>0.3.1</string>
    #         <key>CFBundleShortVersionString</key>
    #         <string>0.3.1</string>
    #         <key>CFBundlePackageType</key>
    #         <string>APPL</string>
    #         <key>NSHighResolutionCapable</key>
    #         <true/>
    #         <key>LSMinimumSystemVersion</key>
    #         <string>10.14.0</string>
    #     </dict>
    #     </plist>
    #     EOF
    #     
    #     create-dmg \
    #       --volname "Todo App v0.3.1" \
    #       --window-pos 200 120 \
    #       --window-size 600 300 \
    #       --icon-size 100 \
    #       --icon "Todo App.app" 175 120 \
    #       --hide-extension "Todo App.app" \
    #       --app-drop-link 425 120 \
    #       "dist/${{ matrix.artifact_name }}.dmg" \
    #       "dist/Todo App.app" || true
    #     
    #     if [ ! -f "dist/${{ matrix.artifact_name }}.dmg" ]; then
    #       hdiutil create -volname "Todo App v0.3.1" -srcfolder "dist/Todo App.app" -ov -format UDZO "dist/${{ matrix.artifact_name }}.dmg"
    #     fi

    - name: Create archive (Windows)
      if: matrix.platform == 'windows'
      run: |
        cd dist
        7z a "${{ steps.version.outputs.artifact_name_windows }}.zip" "${{ steps.version.outputs.artifact_name_windows }}.exe"
      shell: bash

    - name: Create archive (Linux)
      if: matrix.platform == 'linux'
      run: |
        cd dist
        tar -czf "${{ steps.version.outputs.artifact_name_linux }}.tar.gz" "${{ steps.version.outputs.artifact_name_linux }}"

    - name: Upload artifact (Windows)
      if: matrix.platform == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.version.outputs.artifact_name_windows }}
        path: dist/${{ steps.version.outputs.artifact_name_windows }}.zip

    # - name: Upload artifact (macOS)
    #   if: matrix.platform == 'macos'
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ${{ steps.version.outputs.artifact_name_macos }}
    #     path: dist/${{ steps.version.outputs.artifact_name_macos }}.dmg

    - name: Upload artifact (Linux)
      if: matrix.platform == 'linux'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.version.outputs.artifact_name_linux }}
        path: dist/${{ steps.version.outputs.artifact_name_linux }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Read version
      id: version
      run: |
        VERSION=$(cat version)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=$VERSION-preview" >> $GITHUB_OUTPUT
        echo "artifact_name_windows=Todo-App-$VERSION-preview-Windows-x64" >> $GITHUB_OUTPUT
        echo "artifact_name_linux=Todo-App-$VERSION-preview-Linux-x64" >> $GITHUB_OUTPUT
      shell: bash

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        release_name: Todo App ${{ steps.version.outputs.tag_name }}
        body: |
          ## Todo App ${{ steps.version.outputs.version }} - 预览版

          ### 🎉 新功能
          - 🔧 优化系统检测显示，macOS 显示真实版本号
          - 🔧 添加 Linux 发行版本显示支持
          - 🆕 完全重构，使用 customtkinter 框架

          ### 📦 下载说明
          - **Windows 用户**: 下载 `${{ steps.version.outputs.artifact_name_windows }}.zip`
          - **Linux 用户**: 下载 `${{ steps.version.outputs.artifact_name_linux }}.tar.gz`

          ### 🚀 使用方法
          - **Windows**: 解压 ZIP 文件，双击运行 .exe 文件
          - **Linux**: 解压 tar.gz 文件，运行可执行文件

          ### 📋 系统要求
          - **Windows**: Windows 10 或更高版本
          - **macOS**: macOS 10.14 或更高版本
          - **Linux**: 支持 GTK 的现代 Linux 发行版

          ### 🐛 问题反馈
          如果遇到问题，请在 [Issues](https://github.com/SDCOM-0415/To-do.app/issues) 页面反馈。

          ---
          **完整源代码**: [GitHub Repository](https://github.com/SDCOM-0415/To-do.app)
        draft: false
        prerelease: true

    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ steps.version.outputs.artifact_name_windows }}/${{ steps.version.outputs.artifact_name_windows }}.zip
        asset_name: ${{ steps.version.outputs.artifact_name_windows }}.zip
        asset_content_type: application/zip

    # - name: Upload macOS Release Asset
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./${{ steps.version.outputs.artifact_name_macos }}/${{ steps.version.outputs.artifact_name_macos }}.dmg
    #     asset_name: ${{ steps.version.outputs.artifact_name_macos }}.dmg
    #     asset_content_type: application/x-apple-diskimage

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ steps.version.outputs.artifact_name_linux }}/${{ steps.version.outputs.artifact_name_linux }}.tar.gz
        asset_name: ${{ steps.version.outputs.artifact_name_linux }}.tar.gz
        asset_content_type: application/gzip
